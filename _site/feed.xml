<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
<title type="text">Kaze's Mind</title>
<generator uri="https://github.com/jekyll/jekyll">Jekyll</generator>
<link rel="self" type="application/atom+xml" href="/feed.xml" />
<link rel="alternate" type="text/html" href="" />
<updated>2015-01-29T22:07:57-02:00</updated>
<id>/</id>
<author>
  <name>Luiz Guilherme</name>
  <uri>/</uri>
  <email>luiz@kaze.io</email>
</author>


  

<entry>
  <title type="html"><![CDATA[P.hD Diary - PCL Installation and Configuration on OSX]]></title>
  <link rel="alternate" type="text/html" href="/phd/p-hd-diary-pcl-installation-and-configuration-on-osx/" />
  <id>/phd/p-hd-diary-pcl-installation-and-configuration-on-osx</id>
  <published>2015-01-29T21:02:44-02:00</published>
  <updated>2015-01-29T21:02:44-02:00</updated>
  <author>
    <name>Luiz Guilherme</name>
    <uri></uri>
    <email>luiz@kaze.io</email>
  </author>
  <content type="html">&lt;p&gt;As a part of my investigatory phase right now I was looking for good libraries that work good with Kinect. My personal computer is an old pacman Macbook Pro that is been very good thru all these years.  In this post I’ll explain how to setup a Mac properly to use PCL libraries ( no nostalgic posts right now ). For more information about the library itself visit &lt;a href=&quot;http://pointclouds.org/&quot;&gt;http://pointclouds.org/&lt;/a&gt;. This tutorial was done in a machine with OSX 10.10 ( Yosemite ), 4GB DDR3 memory and a Core2Duo Processor. Differences for different configurations may happen.&lt;/p&gt;

&lt;iframe width=&quot;420&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/x3SaWQkPsPI&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;p&gt;PCL Kinect Example&lt;/p&gt;

&lt;p&gt;My biggest challenge here was to see which of the (old) tutorials [ &lt;a href=&quot;http://pointclouds.org/downloads/macosx.html&quot;&gt;1&lt;/a&gt;, &lt;a href=&quot;http://www.pcl-users.org/file/n4022018/PCL_Development_Build_-_Mac_OS_X.pdf&quot;&gt;2&lt;/a&gt;, &lt;a href=&quot;https://github.com/totakke/homebrew-openni2&quot;&gt;3&lt;/a&gt;, &lt;a href=&quot;http://www.pointclouds.org/documentation/tutorials/installing_homebrew.php&quot;&gt;4&lt;/a&gt;, &lt;a href=&quot;http://digitizor.com/2014/06/29/fix-cowardly-refusing-sudo-error-brew/&quot;&gt;5&lt;/a&gt;, among others… ] I’ve found was technically right. Before anyone say that solve this in other way, I’d say that this was the simpler one that choose. I do love free libraries and collaborative softwares, but I prefer to get a very good closed and tested package with all the dependencies configured rather then compile all in a hard way. This solution tries to rely as much as possible in brew ( a package manager for OSX ), and cmake. There are other solutions that use macports and/or manual compilation. I found these harder than using brew.&lt;/p&gt;

&lt;h2 id=&quot;assumptions&quot;&gt;Assumptions&lt;/h2&gt;

&lt;p&gt;I assume that everyone here has a Mac with Xcode installed and configured. Also, you must ( If you haven’t already ) have the Command Line Tools installed. If you don’t, download Xcode via App Store, then create a developer account at &lt;a href=&quot;http://developer.apple.com&quot;&gt;Apple Developer Website&lt;/a&gt;, go to the  &lt;a href=&quot;https://developer.apple.com/downloads/index.action&quot;&gt;download section&lt;/a&gt; and get the pkg to install. Its installation is purely straightforward.&lt;/p&gt;

&lt;h2 id=&quot;brew-packages&quot;&gt;Brew Packages&lt;/h2&gt;

&lt;h3 id=&quot;installing-brew&quot;&gt;Installing Brew&lt;/h3&gt;

&lt;p&gt;First things first, lets install brew. It pretty simple, just open a terminal window and type:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;ruby -e &lt;span class=&quot;s2&quot;&gt;&amp;quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This will automatically get and install all the necessary binaries to run the package. After installing, I’ve made a simple config to use sudo with brew because of some permission errors I was having in my machine. This is totally optional, but if you face these problems just type:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;sudo chown root:wheel &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;which brew&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;installing-pcl-dependencies&quot;&gt;Installing PCL Dependencies&lt;/h3&gt;

&lt;p&gt;Before installing PCL, there are some dependencies that you must install ( and make sure that they are properly linked ). They are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Boost 1.57&lt;/li&gt;
  &lt;li&gt;Flann 1.8.4&lt;/li&gt;
  &lt;li&gt;Qt 4.8.6&lt;/li&gt;
  &lt;li&gt;GLEW 1.11&lt;/li&gt;
  &lt;li&gt;VTK 6.1.0&lt;/li&gt;
  &lt;li&gt;Openni 1.5.8 and 2&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;One of the good things of using a package manager is that is easy to find and trigger an installation of all these dependencies. In brew, you must “tap” two repositories and before installing these packages. The commands are:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;sudo brew update
sudo brew tap homebrew/science
sudo brew tap totakke/openni2&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;It will download some git repositories with information about those packages. Finally, to install the dependencies just type:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;sudo brew install -vd sip pyqt libusb cmake boost flann qhull glew qt vtk openni openni2 openni2-freenectdriver&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;It will take a long time, enjoy a good book in the middle time =)&lt;/p&gt;

&lt;h3 id=&quot;pcl-install&quot;&gt;PCL Install&lt;/h3&gt;

&lt;p&gt;Similar to the previous step, now we just have to tell brew to install PCL with the command:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;sudo brew install -vd pcl --HEAD --with-openni --with-examples&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Just a little parentheses here. The option “—HEAD” says that it gonna get the HEAD of PCL repository, which is now PCL 1.8. In their website, the downloadable version is 1.6. I had a lot of trouble using the 1.6 under Yosemite, so I do not recommend using it. The “–with-openni” option will assume that you’re gonna use this library with PCL ( which is optional, but mandatory if you’d like to use Kinect Viewer ).&lt;/p&gt;

&lt;p&gt;Again, grab a good book and wait for a long compile time.&lt;/p&gt;

&lt;h2 id=&quot;post-configs&quot;&gt;Post Configs&lt;/h2&gt;

&lt;p&gt;If everything went well ( and I hope it did ), there’s some post configs you must do. For OpenNi 2 libs you must export some environments vars using:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;OPENNI2_INCLUDE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/usr/local/include/ni2
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;OPENNI2_REDIST&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/usr/local/lib/ni2&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You might want to put these commands on your ~/.bash_profile as well to avoid doing this command again.&lt;/p&gt;

&lt;h2 id=&quot;building-and-testing&quot;&gt;Building and Testing&lt;/h2&gt;

&lt;p&gt;Following the &lt;a href=&quot;http://pointclouds.org/documentation/tutorials/openni_grabber.php#openni-grabber&quot;&gt;Kinect Example&lt;/a&gt; found in their site, and making some few modifications, lets make a simple test just to show Kinect’s video. Create a file called open_viewer_simple.cpp with the following code:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;pcl/io/openni_grabber.h&amp;gt;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;pcl/visualization/cloud_viewer.h&amp;gt;&lt;/span&gt;

 &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SimpleOpenNIViewer&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;SimpleOpenNIViewer&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;viewer&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;PCL OpenNI Viewer&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;

     &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cloud_cb_&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pcl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PointCloud&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pcl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PointXYZ&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ConstPtr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cloud&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
       &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;viewer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wasStopped&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
         &lt;span class=&quot;n&quot;&gt;viewer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;showCloud&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cloud&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

     &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;run&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
       &lt;span class=&quot;n&quot;&gt;pcl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Grabber&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pcl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OpenNIGrabber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

       &lt;span class=&quot;n&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pcl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PointCloud&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pcl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PointXYZ&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ConstPtr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
         &lt;span class=&quot;n&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bind&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SimpleOpenNIViewer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cloud_cb_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

       &lt;span class=&quot;n&quot;&gt;interface&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;registerCallback&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

       &lt;span class=&quot;n&quot;&gt;interface&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

       &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;viewer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wasStopped&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
       &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
         &lt;span class=&quot;n&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;this_thread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sleep&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;posix_time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;seconds&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
       &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

       &lt;span class=&quot;n&quot;&gt;interface&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stop&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

     &lt;span class=&quot;n&quot;&gt;pcl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;visualization&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CloudViewer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;viewer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

 &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;SimpleOpenNIViewer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;run&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And also, a CMakeLists.txt in the same folder with the following content:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;cmake_minimum_required&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;VERSION 2.8 FATAL_ERROR&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

project&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;openni_grabber&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

find_package&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;PCL 1.2 REQUIRED&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

include_directories&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PCL_INCLUDE_DIRS&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
link_directories&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PCL_LIBRARY_DIRS&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
add_definitions&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PCL_DEFINITIONS&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

IF &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;APPLE&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    FIND_PATH&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; GLEW_INCLUDE_DIR glew.h
      /System/Library/Frameworks/GLEW.framework/Versions/A/Headers
      &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;OPENGL_LIBRARY_DIR&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    SET&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;GLEW_GLEW_LIBRARY &lt;span class=&quot;s2&quot;&gt;&amp;quot;-lGLEW&amp;quot;&lt;/span&gt; CACHE STRING &lt;span class=&quot;s2&quot;&gt;&amp;quot;GLEW library for OSX&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    SET&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;GLEW_cocoa_LIBRARY &lt;span class=&quot;s2&quot;&gt;&amp;quot;-framework Cocoa&amp;quot;&lt;/span&gt; CACHE STRING &lt;span class=&quot;s2&quot;&gt;&amp;quot;Cocoa framework for OSX&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  ENDIF &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;APPLE&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
add_executable &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;openni_grabber openni_viewer_simple.cpp&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
target_link_libraries &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;openni_grabber &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PCL_LIBRARIES&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Another parentheses here. I added the IF(APPLE) section because somehow make was getting a different configuration for GLEW which broke the compilation. This block is to make sure the the flag “-lGLEW” is called instead of “-framework GLEW”. Since we’ve installed everything via brew, this is the right way to call GLEW library&lt;/p&gt;

&lt;p&gt;Now let’s build everything. In a terminal type:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;mkdir build
&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;build
cmake ..&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In the build folder you may have an executable called “openni_grabber”. Just execute it typing:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;./openni_grabber&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;conclusions&quot;&gt;Conclusions&lt;/h2&gt;

&lt;p&gt;After a week of building PCL in many different ways, this was the one that worked and was easiest to reproduce. Since this is not clearly found in one tutorial, I thought it was worth of a blog post. I still have some issues related to the library, but I’ll may write it down in a future opportunity.&lt;/p&gt;

&lt;p&gt;If you read until here, thanks! Leave a feedback in the comments, and see ya!&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;/phd/p-hd-diary-pcl-installation-and-configuration-on-osx/&quot;&gt;P.hD Diary - PCL Installation and Configuration on OSX&lt;/a&gt; was originally published by Luiz Guilherme at &lt;a href=&quot;&quot;&gt;Kaze's Mind&lt;/a&gt; on January 29, 2015.&lt;/p&gt;</content>
</entry>


  

<entry>
  <title type="html"><![CDATA[P.hD Diary - the Beginning]]></title>
  <link rel="alternate" type="text/html" href="/phd/p-hd-diary-the-beginning/" />
  <id>/phd/p-hd-diary-the-beginning</id>
  <published>2015-01-25T21:27:26-02:00</published>
  <updated>2015-01-25T21:27:26-02:00</updated>
  <author>
    <name>Luiz Guilherme</name>
    <uri></uri>
    <email>luiz@kaze.io</email>
  </author>
  <content type="html">&lt;p&gt;Since this is a personal blog, I’ll try to do some stuff as a journal like as well. As you may notice I’m a P.hD Student also, and one of the thing that made me come again to the academia was the willing to study a little bit more things in the Entertainment area. I do work as a researcher now, but it is more for the Oil &amp;amp; Gas Field. They have a lot of interesting problems as well, but my dearest passion still resides in Entertainment.&lt;/p&gt;

&lt;p&gt;What is my project? That’s a hard question to respond in less than one year in the P.hD. I’ve submitted a project to start working with Facial Animation using new capture techniques such as Kinect. Why? Well, I was looking into mocap research when I faced this article:&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;//www.youtube.com/embed/DBoChIFrj2c&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;It is a 2013 Siggraph’s paper about realtime acquisition and avatar animation. The full paper is &lt;a href=&quot;http://lgg.epfl.ch/publications/2013/MIG.pdf&#39;http://lgg.epfl.ch/publications/2013/MIG.pdf&quot;&gt;here&lt;/a&gt;. This opened my mind to the real state of the technology. We not only don’t need points anymore, but also has much more data to deal with. &lt;/p&gt;

&lt;p&gt;The work is just in the beginning. My idea is to fill the blog with some of the stuff I’ve been researching and also exploring Tools and Techniques that I study.&lt;/p&gt;

&lt;p&gt;See ya!&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;/phd/p-hd-diary-the-beginning/&quot;&gt;P.hD Diary - the Beginning&lt;/a&gt; was originally published by Luiz Guilherme at &lt;a href=&quot;&quot;&gt;Kaze's Mind&lt;/a&gt; on January 25, 2015.&lt;/p&gt;</content>
</entry>


  

<entry>
  <title type="html"><![CDATA[The Nostalgic Wololo]]></title>
  <link rel="alternate" type="text/html" href="/games/the-nostalgic-wololo/" />
  <id>/games/the-nostalgic-wololo</id>
  <published>2015-01-19T17:22:38-02:00</published>
  <updated>2015-01-19T17:22:38-02:00</updated>
  <author>
    <name>Luiz Guilherme</name>
    <uri></uri>
    <email>luiz@kaze.io</email>
  </author>
  <content type="html">&lt;p&gt;Back to the 2000 year, I just moved ( again ) with my parents to a new city in the countryside of Rio de Janeiro. I had just a 56Kbps dial-up connection that I could just use at night. Here in Brazil, between midnight and 6am if you make a call, no matter how long it was, they would only charge you in one ‘pulse’.&lt;/p&gt;

&lt;p&gt;That was the time of the beginning ( at least for me ) of IRC. Also, it had been the time of napster and the prelude of online sharing. Since I was still in High School with no friends to hang out, I loved to spend nights in front of the computer chatting, and also finding something nice to play during the night.&lt;/p&gt;

&lt;p&gt;During these nights, I found a game that would steal my nights for a very very long time, called Age of Empires 2. Ensemble Studios, the maker, just released an expansion called The Conquers that not only corrected and improved a lot of stuff from the original game, but also released new ‘civilizations’ to play. Nevertheless, It was groundbreaking during that time. I’ll talk more about the game itself in my vision and the mechanics later.&lt;/p&gt;

&lt;div align=&quot;center&quot;&gt;
&lt;figure&gt;
     &lt;a href=&quot;/images/age00.png&quot;&gt;&lt;img src=&quot;/images/age00.png&quot; alt=&quot;The box of Age of Empires&quot; align=&quot;middle&quot; /&gt;&lt;/a&gt;
 
     &lt;figcaption&gt;The box of Age of Empires&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;&amp;lt;Nostalgic mode&amp;gt;&lt;/p&gt;

&lt;p&gt;I remember of having a few sheets of paper with some strategies of different civilizations  and use is as a cheat during the matches. Although we had internet, is was not rare that some friends that i met on the game decided to make a plan party, so they’d go to someone’s house with giant CPUs and CRT heavy monitors , buy some pizza and coke, and play all night long.&lt;/p&gt;

&lt;p&gt;I think this game not only made my nights less boring, but also leverage my interest in the gaming area and how it works.&lt;/p&gt;

&lt;p&gt;&amp;lt;/Nostalgic mode&amp;gt;&lt;/p&gt;

&lt;p&gt;I’ll point out some features of the game (as I remember) and my opinion of it.&lt;/p&gt;

&lt;h2 id=&quot;mechanics&quot;&gt;Mechanics&lt;/h2&gt;

&lt;div align=&quot;center&quot;&gt;
&lt;figure&gt;
     &lt;a href=&quot;/images/age01.jpg&quot;&gt;&lt;img src=&quot;/images/age01.jpg&quot; alt=&quot;Age’s Gameplay&quot; align=&quot;middle&quot; /&gt;&lt;/a&gt;
 
     &lt;figcaption&gt;Age’s Gameplay&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;The game is basically a RTS that had several civilizations. Each one has a special unit and some exclusive advantages. That time, this was not so well funded yet and Age helped a lot. These civilizations act like a giant “rock, paper, scissors” into them mechanics, any civilization would have a very good atribute/use and flaws that could be explored by the other players.&lt;/p&gt;

&lt;p&gt;During the game itself generally the max population was 200, and the player must balance the resource production with the army created. Quick response to changes and a good strategy was always a part of the game. This gameplay had so much evolution that even Economic Schools use it nowadays to teach a creative thinking in their students and give them classes about Resources x Production (take a look &lt;a href=&quot;http://www.coursehero.org/course/starcraft-theory-and-strategy&quot;&gt; here &lt;/a&gt;) .&lt;/p&gt;

&lt;p&gt;You could make alliances and help your pals with resources to leverage the team against other enemies. But if the game was not a team match literally you’ll never know when someone could betray you. The evolutionary system was great and intuitive.&lt;/p&gt;

&lt;div align=&quot;center&quot;&gt;
&lt;figure&gt;
     &lt;a href=&quot;/images/age02.jpg&quot;&gt;&lt;img src=&quot;/images/age02.jpg&quot; alt=&quot;End game statistics&quot; align=&quot;middle&quot; /&gt;&lt;/a&gt; 
     &lt;figcaption&gt;End game statistics&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;For me, one of the coolest thing in the game was the ending screen. We found some statistics like battles and proportions of army and villagers of all the players in the world. I use this as a learning from every battle. Incremental learning can be one of many consequences of any RTS game. During the time I used to play, I should change my strategy every time I play since my friends would find a flaw for every new trick I apply once. I also must anticipate that from them.&lt;/p&gt;

&lt;h2 id=&quot;sounds&quot;&gt;Sounds&lt;/h2&gt;

&lt;p&gt;One thing that I cannot leave without mentions was the sounds during the game. They were really rich and various with a lot of acting on it. When I was in battle that were a lot of random death sounds at the same time giving the sense of action and motion on it. It is surely one of the best features in the game. The ideia of immersion was not so well defined that time. during a game you barely notice all those tweaks, but if people try to play in a mute mode you’d have that “there’s something missing” feeling.&lt;/p&gt;

&lt;iframe width=&quot;420&quot; height=&quot;315&quot; src=&quot;//www.youtube.com/embed/2oTUvjgvVWE&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;
&lt;/iframe&gt;

&lt;h2 id=&quot;multiplayer&quot;&gt;Multiplayer&lt;/h2&gt;

&lt;p&gt;Ok, I’ll try not to be too nostalgic here. The multiplayer for that time was just great. As I said before, my connection was only a 56kbps dial up at that time, and if nothing was doing in parallel (like downloading music or other stuff) the game worked seamless for up to 8 players! That was unbelievable that time. We use to stick with the Lan parties though, because, at least for me, it was way more funnier when everybody was close and we could see the face of each other.&lt;/p&gt;

&lt;div align=&quot;center&quot;&gt;
&lt;figure&gt;
     &lt;a href=&quot;/images/age03.png&quot;&gt;&lt;img src=&quot;/images/age03.png&quot; alt=&quot;Multiplayer’s Pre-match&quot; align=&quot;middle&quot; /&gt;&lt;/a&gt;
 
     &lt;figcaption&gt;Multiplayer’s Pre-match&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/div&gt;

&lt;h2 id=&quot;cons&quot;&gt;Cons&lt;/h2&gt;

&lt;p&gt;No one cared about the single player, period. I’ve never hear of someone that loved this part of the game. they had really boring missions, and it seems like a very very long unnecessary tutorial for the multiplayer game. Also, the AI, was a little repetitive if you get the tricks fast. I saw people winning the hardest dozen times, but it does not reflect with real people.&lt;/p&gt;

&lt;h2 id=&quot;nowadays&quot;&gt;Nowadays&lt;/h2&gt;

&lt;p&gt;They’ve made a very good HD edition, and tried to revive the series with and online game, but I think that nowadays all the mobas and Starcraft like games got too much space. That’s a shame for such an incredible title.&lt;/p&gt;

&lt;h2 id=&quot;extra-the-wololo-meme&quot;&gt;Extra: The Wololo meme&lt;/h2&gt;

&lt;p&gt;It is funny like some things here in Brazil are greater than other parts of the world. Although this meme is a little nerdy ( you can say everything you want, but a lot of people that used the meme did not play Age of Empires at all, or does not even know that was part of a game ), it spread a lot. It was happy from one side ( for the hope of renewing the series ), but sad in another side. It got too saturated(dunno if this is the best expression in english). So as fast as it got spread, it vanished. But, is nice to remember =)&lt;/p&gt;

&lt;div align=&quot;center&quot;&gt;
&lt;figure&gt;
     &lt;a href=&quot;/images/ageWololo.jpg&quot;&gt;&lt;img src=&quot;/images/ageWololo.jpg&quot; alt=&quot;Even the pope..&quot; align=&quot;middle&quot; /&gt;&lt;/a&gt;
 
     &lt;figcaption&gt;Even the pope...&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;Thanks for reading!&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;/games/the-nostalgic-wololo/&quot;&gt;The Nostalgic Wololo&lt;/a&gt; was originally published by Luiz Guilherme at &lt;a href=&quot;&quot;&gt;Kaze's Mind&lt;/a&gt; on January 19, 2015.&lt;/p&gt;</content>
</entry>


  

<entry>
  <title type="html"><![CDATA[Hello World]]></title>
  <link rel="alternate" type="text/html" href="/programming/hello-world/" />
  <id>/programming/hello-world</id>
  <published>2015-01-10T22:01:04-02:00</published>
  <updated>2015-01-10T22:01:04-02:00</updated>
  <author>
    <name>Luiz Guilherme</name>
    <uri></uri>
    <email>luiz@kaze.io</email>
  </author>
  <content type="html">&lt;p&gt;I think that I have no powers to overhelm such a big tradition, so…&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Hello World!&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
     &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;     &lt;span class=&quot;c1&quot;&gt;// Returns Safely =)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Why C? Even though I have been exposed to many others and generally work with another language I also come back to it. I had some friends at college that used to hate it, they say “That language that has that * also creeps the hell of me”.&lt;/p&gt;

&lt;p&gt;For me it was different, dunno why. My first computer was a 386 that had a MS-DOS and a Windows on the top of it. I used to make all the windows tutorials over and over again, and then come back to the command line and learn the few tricks I studied. C always remembers be that, during that time, it was the basis of almost every thing. Nowadays it always remembers me that if I want something really fast and low level based, I should use it. I’m kinda of nostalgic right now.&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;/programming/hello-world/&quot;&gt;Hello World&lt;/a&gt; was originally published by Luiz Guilherme at &lt;a href=&quot;&quot;&gt;Kaze's Mind&lt;/a&gt; on January 10, 2015.&lt;/p&gt;</content>
</entry>

</feed>
